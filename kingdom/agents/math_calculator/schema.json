{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MathCalculator Agent Schema",
  "description": "JSON schemas for MathCalculator agent inputs, outputs, and mathematical operations",
  
  "definitions": {
    "MathProblemInput": {
      "type": "object",
      "properties": {
        "problem": {
          "type": "string",
          "description": "The mathematical problem to solve",
          "minLength": 1
        },
        "show_steps": {
          "type": "boolean",
          "description": "Whether to show step-by-step solution",
          "default": true
        },
        "enable_visualization": {
          "type": "boolean", 
          "description": "Whether to create visualizations if applicable",
          "default": true
        },
        "precision": {
          "type": "integer",
          "description": "Number of decimal places for results",
          "minimum": 0,
          "maximum": 15,
          "default": 10
        },
        "problem_type": {
          "type": "string",
          "enum": ["arithmetic", "algebra", "calculus", "statistics", "geometry", "finance", "auto"],
          "description": "Hint for problem type (auto-detect if not specified)",
          "default": "auto"
        }
      },
      "required": ["problem"],
      "additionalProperties": false
    },
    
    "RoutedMathRequest": {
      "type": "object",
      "properties": {
        "original_message": {
          "type": "string",
          "description": "The original message containing the math problem"
        },
        "sender": {
          "type": "string",
          "description": "ID of the original sender"
        },
        "routed_by": {
          "type": "string",
          "description": "ID of the agent that routed this request"
        },
        "routing_reason": {
          "type": "string",
          "description": "Category that triggered the routing"
        },
        "workflow_id": {
          "type": "string",
          "description": "Workflow tracking ID"
        },
        "priority": {
          "type": "string",
          "enum": ["low", "normal", "high", "urgent"],
          "default": "normal"
        }
      },
      "required": ["original_message", "sender"],
      "additionalProperties": false
    },
    
    "MathSolutionOutput": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Whether the problem was solved successfully"
        },
        "problem": {
          "type": "string",
          "description": "The original mathematical problem"
        },
        "solution_steps": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Step-by-step solution explanation"
        },
        "python_code": {
          "type": "string",
          "description": "The Python code used to solve the problem"
        },
        "final_answer": {
          "type": "string",
          "description": "The final answer to the problem"
        },
        "confidence": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "description": "Confidence score for the solution"
        },
        "execution_time_ms": {
          "type": "integer",
          "description": "Time taken to solve the problem in milliseconds"
        },
        "has_visualization": {
          "type": "boolean",
          "description": "Whether a visualization was created"
        },
        "visualization_data": {
          "type": "object",
          "description": "Visualization data if created",
          "properties": {
            "visualization_code": {"type": "string"},
            "plot_description": {"type": "string"},
            "chart_type": {"type": "string"}
          }
        },
        "problem_type": {
          "type": "string",
          "description": "Detected or specified problem type"
        },
        "mathematical_concepts": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Mathematical concepts used in the solution"
        },
        "agent_id": {
          "type": "string",
          "description": "ID of the agent that solved the problem"
        },
        "error": {
          "type": "string",
          "description": "Error message if success is false"
        }
      },
      "required": ["success", "agent_id"],
      "additionalProperties": false
    },
    
    "SolutionValidationInput": {
      "type": "object",
      "properties": {
        "problem": {
          "type": "string",
          "description": "The original mathematical problem"
        },
        "solution": {
          "type": "string",
          "description": "The solution to validate"
        },
        "expected_answer": {
          "type": "string",
          "description": "Expected answer for comparison (optional)"
        },
        "validation_type": {
          "type": "string",
          "enum": ["accuracy", "method", "completeness", "all"],
          "default": "all",
          "description": "Type of validation to perform"
        }
      },
      "required": ["problem", "solution"],
      "additionalProperties": false
    },
    
    "ValidationOutput": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Whether validation was performed successfully"
        },
        "validation_result": {
          "type": "string", 
          "description": "Detailed validation result"
        },
        "is_correct": {
          "type": "boolean",
          "description": "Whether the solution is mathematically correct"
        },
        "confidence": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "description": "Confidence in the validation result"
        },
        "issues_found": {
          "type": "array",
          "items": {"type": "string"},
          "description": "List of issues or errors found"
        },
        "suggestions": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Suggestions for improvement"
        },
        "agent_id": {
          "type": "string",
          "description": "ID of the validating agent"
        }
      },
      "required": ["success", "agent_id"],
      "additionalProperties": false
    },
    
    "SolutionHistoryItem": {
      "type": "object",
      "properties": {
        "problem": {
          "type": "string",
          "description": "The mathematical problem"
        },
        "solution": {
          "$ref": "#/definitions/MathSolutionOutput",
          "description": "The complete solution"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When the problem was solved"
        },
        "agent_id": {
          "type": "string",
          "description": "ID of the agent that solved it"
        },
        "user_rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5,
          "description": "Optional user rating of the solution"
        }
      },
      "required": ["problem", "solution", "timestamp", "agent_id"],
      "additionalProperties": false
    },
    
    "AgentConfiguration": {
      "type": "object",
      "properties": {
        "max_solution_history": {
          "type": "integer",
          "description": "Maximum number of solutions to keep in memory",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "execution_timeout": {
          "type": "integer",
          "description": "Maximum time in seconds for code execution",
          "minimum": 5,
          "maximum": 300,
          "default": 60
        },
        "enable_visualization": {
          "type": "boolean",
          "description": "Whether to enable automatic visualizations",
          "default": true
        },
        "precision_digits": {
          "type": "integer",
          "description": "Default precision for mathematical results",
          "minimum": 1,
          "maximum": 15,
          "default": 10
        },
        "safety_level": {
          "type": "string",
          "enum": ["low", "medium", "high"],
          "description": "Code execution safety level",
          "default": "high"
        },
        "gemini_model": {
          "type": "string",
          "description": "Gemini model for mathematical reasoning",
          "default": "gemini-pro"
        },
        "enable_symbolic_math": {
          "type": "boolean",
          "description": "Enable SymPy for symbolic mathematics",
          "default": true
        },
        "max_plot_points": {
          "type": "integer",
          "description": "Maximum points for plotting functions",
          "default": 1000
        }
      },
      "additionalProperties": false
    },
    
    "ProblemTypeClassification": {
      "type": "object",
      "properties": {
        "problem_type": {
          "type": "string",
          "enum": ["arithmetic", "algebra", "calculus", "statistics", "geometry", "finance", "linear_algebra", "number_theory", "general"],
          "description": "Classified problem type"
        },
        "complexity": {
          "type": "string",
          "enum": ["basic", "intermediate", "advanced"],
          "description": "Problem complexity level"
        },
        "requires_code": {
          "type": "boolean",
          "description": "Whether the problem requires code execution"
        },
        "confidence": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "description": "Confidence in the classification"
        },
        "keywords_matched": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Keywords that led to this classification"
        },
        "recommended_approach": {
          "type": "string",
          "description": "Suggested solution approach"
        }
      },
      "required": ["problem_type", "complexity", "requires_code"],
      "additionalProperties": false
    },
    
    "MathConstantsLibrary": {
      "type": "object",
      "properties": {
        "basic_constants": {
          "type": "object",
          "properties": {
            "pi": {"type": "number"},
            "e": {"type": "number"},
            "tau": {"type": "number"},
            "golden_ratio": {"type": "number"}
          }
        },
        "trigonometric": {
          "type": "object",
          "properties": {
            "sqrt2": {"type": "number"},
            "sqrt3": {"type": "number"}
          }
        },
        "physics_constants": {
          "type": "object",
          "description": "Physical constants for physics problems"
        }
      }
    },
    
    "A2AMathMessage": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["math_request", "math_response", "validation_request", "calculation_help"],
          "description": "Type of mathematical A2A message"
        },
        "payload": {
          "type": "object",
          "description": "Message payload with mathematical data"
        },
        "return_address": {
          "type": "string",
          "description": "Agent to send response to"
        },
        "priority": {
          "type": "string",
          "enum": ["low", "normal", "high", "urgent"],
          "default": "normal"
        },
        "mathematical_context": {
          "type": "object",
          "properties": {
            "problem_type": {"type": "string"},
            "complexity": {"type": "string"},
            "requires_precision": {"type": "boolean"}
          }
        }
      },
      "required": ["type", "payload"],
      "additionalProperties": false
    }
  },
  
  "properties": {
    "input_schemas": {
      "type": "object",
      "properties": {
        "math_problem": {"$ref": "#/definitions/MathProblemInput"},
        "routed_request": {"$ref": "#/definitions/RoutedMathRequest"},
        "validation_request": {"$ref": "#/definitions/SolutionValidationInput"}
      }
    },
    
    "output_schemas": {
      "type": "object",
      "properties": {
        "solution": {"$ref": "#/definitions/MathSolutionOutput"},
        "validation": {"$ref": "#/definitions/ValidationOutput"},
        "solution_history": {
          "type": "array",
          "items": {"$ref": "#/definitions/SolutionHistoryItem"}
        },
        "problem_classification": {"$ref": "#/definitions/ProblemTypeClassification"}
      }
    },
    
    "configuration_schema": {"$ref": "#/definitions/AgentConfiguration"},
    "a2a_message_schema": {"$ref": "#/definitions/A2AMathMessage"},
    "constants_schema": {"$ref": "#/definitions/MathConstantsLibrary"}
  }
}